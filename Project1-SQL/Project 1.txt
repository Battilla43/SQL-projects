1. Pairs of people (their card numbers, first names and last names) with the same phone number, with no repetition.
Ex1. If Ben Smith with card number 1 has the same phone number as Keith Smith with card number 2, then the following tuple should be in the result of the query:
[1 | Ben | Smith | 2 | Keith | Smith] (or [2 | Keith | Smith | 1 | Ben | Smith])
Tuple [2 | Keith | Smith | 1 | Ben | Smith] should not appear in the result of the query if the above tuple is in the result, as that would denote repetition of information.
Tuple [1 | Keith | Smith | 1 | Keith | Smith] should not appear in the result of the query as it means that member with card number 1 has the same phone number as member with phone number 1, which is obvious.
Ex2. If Ben Smith with card number 1 and Grace Smith with card number 3 have the same phone number as Keith Smith with card number 2, then the following tuples should be in the result of the query:
[1 | Ben | Smith | 2 | Keith | Smith] (or [2 | Keith | Smith | 1 | Ben | Smith])
[1 | Ben | Smith | 3 | Grace | Smith] (or [3 | Grace | Smith | 1 | Ben | Smith])
[3 | Grace | Smith | 2 | Keith | Smith] (or [2 | Keith | Smith | 3 | Grace | Smith])
--------------------------------
WRITE_YOUR_QUERY_HERE for 1.
(πcard_no,first_name,last_name (MEMBER)) ⨯
ρu1( π phone_no (MEMBER)) ⨯ ρu2(π phone_no (MEMBER))  NOT FIGURED OUT fully
________________________________
2. Members (their card numbers, first, middle and last names) who hold a book longer than 2 weeks, along with the date they borrowed the book.
--------------------------------
WRITE_YOUR_QUERY_HERE for 2.
(π card_no, date_borrowed σ date_borrowed < subdate(now(), 14) and date_returned = null (BORROW)) join (π card_no, first_name, middle_name, last_name MEMBER)
________________________________
3. Members (their card numbers, first, middle and last names) who didn't ever borrow any book.
--------------------------------
WRITE_YOUR_QUERY_HERE for 3.
πcard_no(MEMBER) ⨯ 
πfirst_name(MEMBER) ⨯ 
πmiddle_name(MEMBER) ⨯ 
πlast_name(MEMBER) ⨯
σmin_borrowed ≤ 0(BORROW)
________________________________
4. ISBNs and titles of books borrowed on 22/9/3.
--------------------------------
(π ISBN ( COPY ) join π title ( BOOK )) join (π date_borrowed σ date_borrowed = date('2022-09-03') ( BORROW ))
________________________________
5. Genres.
--------------------------------
WRITE_YOUR_QUERY_HERE for 5.
πgenre(BOOK)
________________________________
6. ISBNs and titles of books that have more than one author.
--------------------------------
WRITE_YOUR_QUERY_HERE for 6.
(π ISBN, title BOOK) join (σ Authors > 1 (γISBN; count(ISBN) → Authors BOOK_AUTHOR))
________________________________
7. ISBN(s) and title(s) of all books written by Thomas Connolly(s), if any.
--------------------------------
WRITE_YOUR_QUERY_HERE for 7.
π ISBN, title (σ author_id = 9 ∨ author_id = 12 (AUTHOR⨝BOOK_AUTHOR⨝BOOK))
________________________________
8. ISBN(s) and title(s) of all books borrowed by member 331, if any.
--------------------------------
WRITE_YOUR_QUERY_HERE for 8.
(π ISBN, title(BOOK)) ⨯ (σ card_no = 331(MEMBER)) NOT FIGURED OUT fully
________________________________
9. Member(s) (their card number) who renewed a book twice and still didn't return it, if any.
--------------------------------
WRITE_YOUR_QUERY_HERE for 9.
π card_no (σ renewals_no = 2 ∧ date_returned = null (BORROW))
________________________________
10. Book(s) (their ISBN(s) and title(s)) with the highest edition.
If there is a book with edition 9th, and no other book has a higher edition in the Libary database, then that book should be returned in the result (it's ISBN and title, to be specific).
--------------------------------
WRITE_YOUR_QUERY_HERE for 10.
π ISBN, title BOOK - π i2.ISBN, i2.title (σi1.edition > i2.edition (ρi1 BOOK ⨯ ρi2 BOOK))





________________________________